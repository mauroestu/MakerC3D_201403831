package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER,MAYORQUE,MENORQUE,IGUALIGUAL,DIFERENTE,MAYORIGUAL,MENORIGUAL,OR,AND,NOT;
nonterminal NodoC3D inicial, expresion, relacional,logico;
precedence left MAS,MENOS;
precedence left MULT,DIV;
precedence right POT;
precedence nonassoc  MAYORQUE,MENORQUE,MAYORIGUAL,MENORIGUAL,IGUALIGUAL,DIFERENTE;
precedence left OR;
precedence left AND;
precedence left NOT;

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} logico:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D(exp.getVerdad()+"= true\n");
                        ControlC3D.agregarC3D(exp.getFalsa()+"= false\n");
                        if(exp.getCad()!=null) ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                        
                    :};
relacional::= expresion:izq MAYORQUE expresion:der{:
                        String etq_verdad=ControlC3D.generaETQ();
                        String etq_falsa=ControlC3D.generaETQ();
                        String c3d = "if  " + izq.getCad() + " > " + der.getCad() + " then goto "+etq_verdad+"\ngoto "+etq_falsa+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etq_verdad,etq_falsa);:}
              |expresion:izq MENORIGUAL expresion:der{:String etq_verdad=ControlC3D.generaETQ();
                        String etq_falsa=ControlC3D.generaETQ();
                        String c3d = "if  " + izq.getCad() + " <= " + der.getCad() + " then goto "+etq_verdad+"\ngoto "+etq_falsa+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etq_verdad,etq_falsa);:}
              |expresion:izq MAYORIGUAL expresion:der{:String etq_verdad=ControlC3D.generaETQ();
                        String etq_falsa=ControlC3D.generaETQ();
                        String c3d = "if  " + izq.getCad() + " >= " + der.getCad() + " then goto "+etq_verdad+"\ngoto "+etq_falsa+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etq_verdad,etq_falsa);:}
              |expresion:izq MENORQUE expresion:der {:String etq_verdad=ControlC3D.generaETQ();
                        String etq_falsa=ControlC3D.generaETQ();
                        String c3d = "if  " + izq.getCad() + " < " + der.getCad() + " then goto "+etq_verdad+"\ngoto "+etq_falsa+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etq_verdad,etq_falsa);:}
              |expresion:izq IGUALIGUAL expresion:der{:String etq_verdad=ControlC3D.generaETQ();
                        String etq_falsa=ControlC3D.generaETQ();
                        String c3d = "if  " + izq.getCad() + " == " + der.getCad() + " then goto "+etq_verdad+"\ngoto "+etq_falsa+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etq_verdad,etq_falsa);:}
              |expresion:izq DIFERENTE expresion:der{:String etq_verdad=ControlC3D.generaETQ();
                        String etq_falsa=ControlC3D.generaETQ();
                        String c3d ="if  " + izq.getCad() + " != " + der.getCad() + " then goto "+etq_verdad+"\ngoto "+etq_falsa+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(etq_verdad,etq_falsa);:}
              |expresion:exp{:RESULT=exp;:}
              ;
logico ::= logico:izq  OR {: String etq_falsa=izq.getFalsa()+":\n";
                    ControlC3D.agregarC3D(etq_falsa);:} logico:der{:
                        String etq_verdad=izq.getVerdad()+", "+der.getVerdad();

                        String etq_falsa=der.getFalsa();
                        RESULT = new NodoC3D(etq_verdad,etq_falsa);
               :}
               |logico:izq AND {:String etq_verdad=izq.getVerdad()+":\n";
                    ControlC3D.agregarC3D(etq_verdad);:} logico:der {: 
                        String etq_falsa=izq.getFalsa()+", "+der.getFalsa();

                        String etq_verdad=der.getVerdad();
                       RESULT = new NodoC3D(etq_verdad,etq_falsa);:}
               |NOT logico:l{:String etq_verdad=l.getVerdad();
                            String etq_falsa=l.getFalsa();
                        RESULT = new NodoC3D(etq_falsa,etq_verdad);:}
               | relacional:r {:RESULT=r;:}
               ;

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ logico:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;